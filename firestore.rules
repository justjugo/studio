rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Fetches the user's document data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Checks if the user has the 'paiduser' role
    function isPaidUser(userId) {
      return getUserData(userId).role == 'paiduser';
    }

    // Checks if at least 24 hours have passed since the last session
    function isDailyLimitRespected(lastSessionTimestamp) {
      // If there's no timestamp, it's the user's first session.
      if (lastSessionTimestamp == null) {
        return true;
      }
      // Check if the current time is more than 24 hours after the last session.
      return request.time.toMillis() - lastSessionTimestamp.toMillis() > 24 * 60 * 60 * 1000;
    }

    // --- Rule Definitions ---

    // USER PROFILE
    match /users/{userId} {
      allow get: if isOwner(userId);
      
      // On create, a new user must be assigned the 'user' role.
      allow create: if isOwner(userId) && request.resource.data.role == 'user';

      // A user cannot change their own role. This must be done by a server process.
      // They can update other fields, but the 'role' must remain the same.
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role;

      // No one can list all users.
      allow list: if false;
    }

    // USER SUBCOLLECTIONS (including 'testSessions')
    match /users/{userId}/{collection}/{docId} {
      // Owners can read any of their own documents.
      allow read: if isOwner(userId);

      // Specific rule for creating new test sessions
      allow create: if isOwner(userId) &&
                     (collection == 'testSessions'
                       ? (isPaidUser(userId) || isDailyLimitRespected(getUserData(userId).lastSessionTimestamp))
                       : true); // Allow create for other collections

      // Allow updates and deletes by the owner.
      allow update, delete, write: if isOwner(userId);
    }

    // PUBLIC COLLECTIONS
    match /questions/{questionId} {
      allow get, list: if true;
    }
    match /questionContent/{questionContentId} {
      allow get, list: if true;
    }
  }
}
